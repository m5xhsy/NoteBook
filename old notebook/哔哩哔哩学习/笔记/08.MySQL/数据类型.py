'''
(一) 整型
    == == == == == == == == == == == == == == == == == == == ==
    tinyint[(m)][unsigned][zerofill]
    小整数，数据类型用于保存一些范围的整数数值范围：
    有符号：
    -128 ～ 127
    无符号：
    0 ～ 255
    PS： MySQL中无布尔值，使用tinyint(1)构造

    == == == == == == == == == == == == == == == == == == == ==
    int[(m)][unsigned][zerofill]
    整数，数据类型用于保存一些范围的整数数值范围：
    有符号：
    -2147483648 ～ 2147483647
    无符号：
    0 ～ 4294967295

    == == == == == == == == == == == == == == == == == == == ==
    bigint[(m)][unsigned][zerofill]
    大整数，数据类型用于保存一些范围的整数数值范围：
    有符号：
    -9223372036854775808 ～ 9223372036854775807
    无符号：
    0 ～  1844674407370955161

(二) 浮点型
    -------------------------FLOAT-------------------
    FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]
    #参数解释：单精度浮点数（非准确小数值），M是全长，D是小数点后个数。M最大值为255，D最大值为30
    #有符号：
               -3.402823466E+38 to -1.175494351E-38,
               1.175494351E-38 to 3.402823466E+38
    #无符号：
               1.175494351E-38 to 3.402823466E+38
    #精确度：
        **** 随着小数的增多，精度变得不准确 ****

    -------------------------DOUBLE-----------------------
    DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]
    #参数解释： 双精度浮点数（非准确小数值），M是全长，D是小数点后个数。M最大值为255，D最大值为30
    #有符号：
               -1.7976931348623157E+308 to -2.2250738585072014E-308
               2.2250738585072014E-308 to 1.7976931348623157E+308
    #无符号：
               2.2250738585072014E-308 to 1.7976931348623157E+308
    #精确度：
        ****随着小数的增多，精度比float要高，但也会变得不准确 ****

    --------------------DECIMAL------------------------
    decimal[(m[,d])] [unsigned] [zerofill]
    #参数解释：准确的小数值，M是整数部分总个数（负号不算），D是小数点后个数。 M最大值为65，D最大值为30。
    #精确度：
        **** 随着小数的增多，精度始终准确 ****
            对于精确数值计算时需要用此类型
            decaimal能够存储精确值的原因在于其内部按照字符串存储。

(三) 日期类型        now()表示当前时间
    语法：
            year
                YYYY（1901/2155）

            data
                YYYY-MM-DD（1000-01-01/9999-12-31）

            time
                HH:MM:SS（'-838:59:59'/'838:59:59'）

            datatime
                YYYY-MM-DD HH:MM:SS（1000-01-01 00:00:00/9999-12-31 23:59:59    Y）

            timestamp
                YYYYMMDD HHMMSS（1970-01-01 00:00:00/2037 年某时）

    datatime和timestamp区别:
        在实际应用的很多场景中，MySQL的这两种日期类型都能够满足我们的需要，存储精度都为秒，但在某些情况下，会展现出他们各自的优劣。
        下面就来总结一下两种日期类型的区别。
            1.DATETIME的日期范围是1001——9999年，TIMESTAMP的时间范围是1970——2038年。
            2.DATETIME存储时间与时区无关，TIMESTAMP存储时间与时区有关，显示的值也依赖于时区。在mysql服务器，
                操作系统以及客户端连接都有时区的设置。
            3.DATETIME使用8字节的存储空间，TIMESTAMP的存储空间为4字节。因此，TIMESTAMP比DATETIME的空间利用率更高。
            4.DATETIME的默认值为null；TIMESTAMP的字段默认不为空（not null）,默认值为当前时间（CURRENT_TIMESTAMP），
                如果不做特殊处理，并且update语句中没有指定该列的更新值，则默认更新为当前时间。

(四) 字符类型        length()：查看字节数     char_length():查看字符数
    #官网：https://dev.mysql.com/doc/refman/5.7/en/char.html
    #注意：char和varchar括号内的参数指的都是字符的长度
    #char类型：定长，简单粗暴，浪费空间，存取速度快
        字符长度范围：0-255（一个中文是一个字符，是utf8编码的3个字节）
        存储：
            存储char类型的值时，会往右填充空格来满足长度
            例如：指定长度为10，存>10个字符则报错，存<10个字符则用空格填充直到凑够10个字符存储
        检索：
            在检索或者说查询时，查出的结果会自动删除尾部的空格，除非我们打开pad_char_to_full_length SQL模式（设置SQL模式：SET sql_mode = 'PAD_CHAR_TO_FULL_LENGTH';
    　　　　　　查询sql的默认模式：select @@sql_mode;）

    #varchar类型：变长，精准，节省空间，存取速度慢
        字符长度范围：0-65535（如果大于21845会提示用其他类型 。mysql行最大限制为65535字节，字符编码为utf-8：https://dev.mysql.com/doc/refman/5.7/en/column-count-limit.html）
        存储：
            varchar类型存储数据的真实内容，不会用空格填充，如果'ab  ',尾部的空格也会被存起来
            强调：varchar类型会在真实数据前加1-2Bytes的前缀，该前缀用来表示真实数据的bytes字节数（1-2Bytes最大表示65535个数字，正好符合mysql对row的最大字节限制，即已经足够使用）
            如果真实的数据<255bytes则需要1Bytes的前缀（1Bytes=8bit 2**8最大表示的数字为255）
            如果真实的数据>255bytes则需要2Bytes的前缀（2Bytes=16bit 2**16最大表示的数字为65535）
        检索：
            尾部有空格会保存下来，在检索或者说查询时，也会正常显示包含空格在内的内容

(五) 枚举和集合
    字段的值只能在给定范围中选择，如单选框，多选框
    enum 单选 只能在给定的范围内选一个值，如性别 sex 男male/女female
    set 多选 在给定的范围内可以选择一个或一个以上的值（爱好1,爱好2,爱好3...）

    示例：
        创建表
            create table consumer(
            id int,
            name varchar(50),
            sex enum('male','female','other')default 'male',                    #默认male
            level enum('vip1','vip2','vip3','vip4'),                            #在指定范围内，多选一
            fav set('play','music','read','study')                              #在指定范围内，多选多
            );
        插入数据
            insert into consumer values
            (1,'赵云','male','vip2','read,study'),
            (2,'赵云2','other','vip4','play');


